<?php

class ApprovedFood_Sniffs_Files_LicenseSniff implements PHP_CodeSniffer_Sniff {
    private $_commentStr;
    private $_yearRegEx = "/.*(?<year>[0-9]{4}).*/";
    private $_date;

    protected static $comment = array(
    );

    function __construct()
    {
        $this->_date = date("Y");
        $this->_commentStr = array(
            ' * @copyright Copyright (c) 2009-'.$this->_date.' Approved Food Ltd',
            ' * @license   http://approvedfood.biz Private'."\n",
        );
    }

    public function register() {
        return array(T_OPEN_TAG);
    }

    public function process(PHP_CodeSniffer_File $phpcsFile, $stackptr) {
        // We only want to do this once per file.
        $prevopentag = $phpcsFile->findPrevious(T_OPEN_TAG, $stackptr - 1);
        if ($prevopentag !== false) {
            return;
        }
        if ($stackptr > 0) {
            $phpcsFile->addError('The first thing in a PHP file must be the <?php tag.', 0, 'NoPHP');
            return;
        }
        $tokens = $phpcsFile->getTokens();
        // Find count the number of newlines after the opening <?PHP. We only
        // count enough to see if the number is right.
        // Note that the opening PHP tag includes one newline.
        $numnewlines = 0;
        for ($i = 1; $i <= 5; ++$i) {
            if ($tokens[$i]['code'] == T_WHITESPACE && $tokens[$i]['content'] == "\n") {
                $numnewlines = $i;
            } else {
                break;
            }
        }
        if ($numnewlines > 0) {
            $phpcsFile->addError('The opening <?php tag must be followed by exactly one newline.',
                    1, 'WrongWhitespace');
            return;
        }
        
        // all line of a DocComment will be checked but if there was fount an error
        // the Loop will break and only this error will be shown, because if there
        // is one error in the DocComment it is quite likely that there are much
        // more errors
        $lines_matched = 0;
        foreach ($this->_commentStr as $commentStrLineNumber => $commentStrLine) {
            $tokenNumber = $stackptr+$commentStrLineNumber+1;
            if ($commentStrLine != $tokens[$tokenNumber]['content']) {
                //Verify copyright line is well formatted
                if (preg_match('/^\s\*\s@copyright/i', $tokens[$tokenNumber]['content'])) {
                    preg_match_all($this->_yearRegEx, $tokens[$tokenNumber]['content'], $matches);
                    if (isset($matches['year'][0]) && $this->_date != $matches['year'][0]) {
                        $error = 'Wrong DocComment: Found "%s" instead of "' . $this->_date . '".';
                        $phpcsFile->addError(
                            $error,
                            $tokenNumber,
                            'WrongFileCommentYear',
                            $matches['year'][0]
                        );
                        return;
                    }
                }
                $data = addcslashes($tokens[$tokenNumber]['content'], "\n");
                $error = 'Wrong DocComment: Found "%s" instead of "'.
                    addcslashes($commentStrLine, "\n") .
                    '".';
                $phpcsFile->addError($error, $tokenNumber, 'WrongFileCommentLine', $data);
                return;
            }
        }
    }
}
